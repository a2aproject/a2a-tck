/home/maeste/project/a2a-workspace/.venv/lib/python3.13/site-packages/pytest_asyncio/plugin.py:208: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
============================= test session starts ==============================
platform linux -- Python 3.13.2, pytest-8.3.5, pluggy-1.6.0
rootdir: /home/maeste/project/a2a-workspace/a2a-tck
configfile: pyproject.toml
testpaths: tests
plugins: anyio-4.9.0, asyncio-1.0.0
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collected 76 items

tests/test_agent_card.py ....s                                           [  6%]
tests/test_agent_card_utils.py ........                                  [ 17%]
tests/test_authentication.py sss                                         [ 21%]
tests/test_concurrency.py ...                                            [ 25%]
tests/test_edge_cases.py .F....F                                         [ 34%]
tests/test_invalid_business_logic.py F.F..                               [ 40%]
tests/test_json_rpc_compliance.py .......                                [ 50%]
tests/test_message_send_method.py ..ss...ss                              [ 61%]
tests/test_protocol_violations.py ..F.                                   [ 67%]
tests/test_push_notification_config_methods.py ssss                      [ 72%]
tests/test_reference_task_ids.py s.                                      [ 75%]
tests/test_resilience.py ..                                              [ 77%]
tests/test_sdk_limitations.py X.                                         [ 80%]
tests/test_state_transitions.py ..                                       [ 82%]
tests/test_streaming_methods.py ...F                                     [ 88%]
tests/test_tasks_cancel_method.py ...                                    [ 92%]
tests/test_tasks_get_method.py ...                                       [ 96%]
tests/test_transport_security.py .sF                                     [100%]

=================================== FAILURES ===================================
______________________________ test_empty_arrays _______________________________

sut_client = <tck.sut_client.SUTClient object at 0x7f13bf775810>

    @pytest.mark.all  # Not a core test
    def test_empty_arrays(sut_client):
        """
        Test SUT's handling of empty arrays in parameters.
        """
        # Empty parts array (should be rejected)
        params = {
            "message": {
                "messageId": "test-empty-array-message-id-" + str(uuid.uuid4()),
                "role": "user",
                "parts": []
            }
        }
    
        req = message_utils.make_json_rpc_request("message/send", params=params)
        resp = sut_client.send_json_rpc(**req)
    
        # The SUT should reject this with InvalidParams
>       assert message_utils.is_json_rpc_error_response(resp, expected_id=req["id"])
E       AssertionError: assert False
E        +  where False = <function is_json_rpc_error_response at 0x7f13bf4cc5e0>({'id': 'e0a85143-4132-458f-b35d-8356c0e54c2a', 'jsonrpc': '2.0', 'result': {'artifacts': [{'artifactId': '39dd8ece-859...ssage-id-d26491b7-6064-4f87-b445-8a4ec8f5fa08', 'parts': [], ...}], 'id': '3fdf9adf-f842-4ea4-b9eb-7210eb6515e2', ...}}, expected_id='e0a85143-4132-458f-b35d-8356c0e54c2a')
E        +    where <function is_json_rpc_error_response at 0x7f13bf4cc5e0> = message_utils.is_json_rpc_error_response

tests/test_edge_cases.py:67: AssertionError
_____________________________ test_boundary_values _____________________________

sut_client = <tck.sut_client.SUTClient object at 0x7f13bf775810>

    @pytest.mark.all  # Not a core test
    def test_boundary_values(sut_client):
        """
        Test SUT's handling of boundary values in parameters.
        """
        # Test with minimum/maximum values for historyLength
        task_id = _create_simple_task(sut_client)
    
        # Very large historyLength (e.g., int32 max)
        large_history_req = message_utils.make_json_rpc_request(
            "tasks/get",
            params={"id": task_id, "historyLength": 2147483647}
        )
        large_history_resp = sut_client.send_json_rpc(**large_history_req)
    
        # Very small historyLength (e.g., 0)
        zero_history_req = message_utils.make_json_rpc_request(
            "tasks/get",
            params={"id": task_id, "historyLength": 0}
        )
        zero_history_resp = sut_client.send_json_rpc(**zero_history_req)
    
        # Negative historyLength (invalid)
        neg_history_req = message_utils.make_json_rpc_request(
            "tasks/get",
            params={"id": task_id, "historyLength": -1}
        )
        neg_history_resp = sut_client.send_json_rpc(**neg_history_req)
    
        # Check that positive values are accepted
        assert message_utils.is_json_rpc_success_response(large_history_resp, expected_id=large_history_req["id"])
        assert message_utils.is_json_rpc_success_response(zero_history_resp, expected_id=zero_history_req["id"])
    
        # Negative should be rejected
>       assert message_utils.is_json_rpc_error_response(neg_history_resp, expected_id=neg_history_req["id"])
E       AssertionError: assert False
E        +  where False = <function is_json_rpc_error_response at 0x7f13bf4cc5e0>({'id': '251396ff-7b97-4578-9bbd-d7e761f86bf0', 'jsonrpc': '2.0', 'result': {'artifacts': [{'artifactId': 'fc2c3200-5a5...'contextId': 'e19817e1-78b5-429b-b614-a5b4c691975e', 'history': [], 'id': 'fce746e5-8fde-4971-a724-9e850ae6796f', ...}}, expected_id='251396ff-7b97-4578-9bbd-d7e761f86bf0')
E        +    where <function is_json_rpc_error_response at 0x7f13bf4cc5e0> = message_utils.is_json_rpc_error_response

tests/test_edge_cases.py:230: AssertionError
__________________________ test_unsupported_part_kind __________________________

sut_client = <tck.sut_client.SUTClient object at 0x7f13bf589480>

    @pytest.mark.all  # Not a core test as per requirements
    def test_unsupported_part_kind(sut_client):
        """
        A2A JSON-RPC Spec: Business Logic Validation
        Test that the SUT properly rejects a message with an unsupported part type.
        """
        # Create a message with an unsupported part type
        params = {
            "message": {
                "messageId": "test-unsupported-part-message-id-" + str(uuid.uuid4()),
                "role": "user",
                "parts": [
                    {
                        "type": "unsupported_type",  # Invalid/unsupported type
                        "text": "This should be rejected"
                    }
                ]
            }
        }
    
        req = message_utils.make_json_rpc_request("message/send", params=params)
        resp = sut_client.send_json_rpc(**req)
    
        # Expect either an error response or a task with failed state
        if message_utils.is_json_rpc_error_response(resp, expected_id=req["id"]):
            # Check if it's an InvalidParamsError or other error
            assert resp["error"]["code"] in {-32602, -32603}, "Expected InvalidParamsError or InternalError"
        else:
            # If not an error response, the task might be created but in a failed state
            assert message_utils.is_json_rpc_success_response(resp, expected_id=req["id"])
            task = resp["result"]
>           assert task["status"].get("state") in {"failed", "error"}, "Task should be in failed state"
E           AssertionError: Task should be in failed state
E           assert 'completed' in {'error', 'failed'}
E            +  where 'completed' = <built-in method get of dict object at 0x7f13bf467500>('state')
E            +    where <built-in method get of dict object at 0x7f13bf467500> = {'message': {'contextId': '47759d1c-291f-49d7-9661-d43164c417e4', 'kind': 'message', 'messageId': '14a199b8-2861-41c9-b1dd-7503e667ed7d', 'parts': [{'kind': 'text', 'text': 'Hello World! Nice to meet you!'}], ...}, 'state': 'completed'}.get

tests/test_invalid_business_logic.py:43: AssertionError
___________________________ test_empty_message_parts ___________________________

sut_client = <tck.sut_client.SUTClient object at 0x7f13bf589480>

    @pytest.mark.all  # Not a core test as per requirements
    def test_empty_message_parts(sut_client):
        """
        A2A JSON-RPC Spec: Business Logic Validation
        Test that the SUT properly handles a message with empty parts array.
    
        Per A2A specification, a message MUST contain at least one part.
        The SUT MUST reject messages with empty parts arrays.
        """
        # Create a message with empty parts array (violates A2A MUST requirement)
        params = {
            "message": {
                "messageId": "test-empty-parts-message-id-" + str(uuid.uuid4()),
                "role": "user",
                "parts": []
            }
        }
    
        req = message_utils.make_json_rpc_request("message/send", params=params)
        resp = sut_client.send_json_rpc(**req)
    
        # Per A2A spec, this MUST be rejected with InvalidParams error
>       assert message_utils.is_json_rpc_error_response(resp, expected_id=req["id"]), \
            f"SUT MUST reject messages with empty parts array per A2A spec, but got: {resp}"
E       AssertionError: SUT MUST reject messages with empty parts array per A2A spec, but got: {'id': 'e53ebf2c-ae69-4773-965e-c96f65887664', 'jsonrpc': '2.0', 'result': {'artifacts': [{'artifactId': '839f5b6e-5ae2-4b1e-a618-6dd6e70a0e3b', 'description': 'Agent response to user message.', 'name': 'response', 'parts': [{'kind': 'text', 'text': 'Hello! Please provide a message for me to respond to.'}]}], 'contextId': 'af385bf8-d33f-4614-81a1-87ded0724727', 'history': [{'contextId': 'af385bf8-d33f-4614-81a1-87ded0724727', 'kind': 'message', 'messageId': 'test-empty-parts-message-id-1d16d484-879e-47a0-9bfe-36d975ed7123', 'parts': [], 'role': 'user', 'taskId': '9e6385a3-fe75-4419-9f58-4efbc79114e5'}], 'id': '9e6385a3-fe75-4419-9f58-4efbc79114e5', 'kind': 'task', 'status': {'message': {'contextId': 'af385bf8-d33f-4614-81a1-87ded0724727', 'kind': 'message', 'messageId': '25a181f9-4f26-47ee-b132-cbfeb2c5b99c', 'parts': [{'kind': 'text', 'text': 'Hello! Please provide a message for me to respond to.'}], 'role': 'agent', 'taskId': '9e6385a3-fe75-4419-9f58-4efbc79114e5'}, 'state': 'completed'}}}
E       assert False
E        +  where False = <function is_json_rpc_error_response at 0x7f13bf4cc5e0>({'id': 'e53ebf2c-ae69-4773-965e-c96f65887664', 'jsonrpc': '2.0', 'result': {'artifacts': [{'artifactId': '839f5b6e-5ae...ssage-id-1d16d484-879e-47a0-9bfe-36d975ed7123', 'parts': [], ...}], 'id': '9e6385a3-fe75-4419-9f58-4efbc79114e5', ...}}, expected_id='e53ebf2c-ae69-4773-965e-c96f65887664')
E        +    where <function is_json_rpc_error_response at 0x7f13bf4cc5e0> = message_utils.is_json_rpc_error_response

tests/test_invalid_business_logic.py:105: AssertionError
__________________________ test_missing_method_field ___________________________

sut_client = <tck.sut_client.SUTClient object at 0x7f13bf4419d0>
text_message_params = {'message': {'messageId': 'test-protocol-message-id-ddf2e5fc-1672-4975-9a93-007b3fdbd0ce', 'parts': [{'kind': 'text', 'text': 'Hello from protocol violation test!'}], 'role': 'user'}}

    @pytest.mark.all  # Not a core test
    def test_missing_method_field(sut_client, text_message_params):
        """
        Test SUT's response to a request missing the method field.
    
        Per JSON-RPC 2.0 specification, the method field is REQUIRED.
        The SUT MUST reject requests missing required fields.
        """
        # Create a valid request first
        req = message_utils.make_json_rpc_request("message/send", params=text_message_params)
    
        # Remove the method field (violates JSON-RPC 2.0 MUST requirement)
        req.pop("method")
    
        # Send the malformed request using raw JSON-RPC method
        resp = sut_client.send_raw_json_rpc(req)
    
        # Per JSON-RPC 2.0 spec, this MUST be rejected with InvalidRequest error
>       assert message_utils.is_json_rpc_error_response(resp, expected_id=req["id"]), \
            f"SUT MUST reject requests missing required 'method' field per JSON-RPC 2.0 spec, but got: {resp}"
E       AssertionError: SUT MUST reject requests missing required 'method' field per JSON-RPC 2.0 spec, but got: {'id': '55dc3a0c-a9d5-4178-8a54-471716aca7ee', 'jsonrpc': '2.0', 'result': {'artifacts': [{'artifactId': '6a39d20e-292d-4f08-9ad9-ea01c4ac9dd9', 'description': 'Agent response to user message.', 'name': 'response', 'parts': [{'kind': 'text', 'text': 'Hello World! Nice to meet you!'}]}], 'contextId': '7d7805d8-2cb5-4739-871a-16c6755cdecf', 'history': [{'contextId': '7d7805d8-2cb5-4739-871a-16c6755cdecf', 'kind': 'message', 'messageId': 'test-protocol-message-id-ddf2e5fc-1672-4975-9a93-007b3fdbd0ce', 'parts': [{'kind': 'text', 'text': 'Hello from protocol violation test!'}], 'role': 'user', 'taskId': 'a6f3b6a6-d129-4035-b25f-1ca38218e877'}], 'id': 'a6f3b6a6-d129-4035-b25f-1ca38218e877', 'kind': 'task', 'status': {'message': {'contextId': '7d7805d8-2cb5-4739-871a-16c6755cdecf', 'kind': 'message', 'messageId': '2a4653f9-ac0f-4f78-a15f-b2817f4d08ae', 'parts': [{'kind': 'text', 'text': 'Hello World! Nice to meet you!'}], 'role': 'agent', 'taskId': 'a6f3b6a6-d129-4035-b25f-1ca38218e877'}, 'state': 'completed'}}}
E       assert False
E        +  where False = <function is_json_rpc_error_response at 0x7f13bf4cc5e0>({'id': '55dc3a0c-a9d5-4178-8a54-471716aca7ee', 'jsonrpc': '2.0', 'result': {'artifacts': [{'artifactId': '6a39d20e-292...d': 'text', 'text': 'Hello from protocol violation test!'}], ...}], 'id': 'a6f3b6a6-d129-4035-b25f-1ca38218e877', ...}}, expected_id='55dc3a0c-a9d5-4178-8a54-471716aca7ee')
E        +    where <function is_json_rpc_error_response at 0x7f13bf4cc5e0> = message_utils.is_json_rpc_error_response

tests/test_protocol_violations.py:115: AssertionError
______________________ test_tasks_resubscribe_nonexistent ______________________

async_http_client = <httpx.AsyncClient object at 0x7f13beb01a70>
agent_card_data = {'capabilities': {'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text'], 'description': 'A...plete A2A agent implementation designed specifically for testing with the A2A Technology Compatibility Kit (TCK)', ...}

    @pytest.mark.asyncio
    async def test_tasks_resubscribe_nonexistent(async_http_client, agent_card_data):
        """
        A2A JSON-RPC Spec: tasks/resubscribe for non-existent task
        Test the SUT's handling of a resubscribe request for a task that doesn't exist.
        Expect a JSON-RPC error with TaskNotFoundError or similar.
        """
        # Skip if streaming is not supported
        if not has_streaming_support(agent_card_data):
            pytest.skip("Streaming not supported by SUT according to Agent Card")
    
        # Mark as core since we've confirmed streaming is supported
        pytestmark = pytest.mark.core
    
        # Use a random, non-existent task ID
        task_id = "non-existent-task-id-" + message_utils.generate_request_id()
    
        resubscribe_params = {"id": task_id}
        req_id = message_utils.generate_request_id()
        json_rpc_request = message_utils.make_json_rpc_request("tasks/resubscribe", params=resubscribe_params, id=req_id)
    
        sut_url = config.get_sut_url()
        headers = {"Content-Type": "application/json"}
    
        try:
            response = await async_http_client.post(
                sut_url,
                json=json_rpc_request,
                headers=headers,
                timeout=10  # Use timeout here since we expect an error
            )
    
            # We expect a JSON-RPC error for a non-existent task, not a stream
>           assert not response.headers.get("content-type", "").startswith("text/event-stream")
E           AssertionError: assert not True
E            +  where True = <built-in method startswith of str object at 0x7f13bf408210>('text/event-stream')
E            +    where <built-in method startswith of str object at 0x7f13bf408210> = 'text/event-stream; charset=utf-8'.startswith
E            +      where 'text/event-stream; charset=utf-8' = get('content-type', '')
E            +        where get = Headers({'date': 'Thu, 29 May 2025 09:42:34 GMT', 'server': 'uvicorn', 'cache-control': 'no-store', 'connection': 'keep-alive', 'x-accel-buffering': 'no', 'content-type': 'text/event-stream; charset=utf-8', 'transfer-encoding': 'chunked'}).get
E            +          where Headers({'date': 'Thu, 29 May 2025 09:42:34 GMT', 'server': 'uvicorn', 'cache-control': 'no-store', 'connection': 'keep-alive', 'x-accel-buffering': 'no', 'content-type': 'text/event-stream; charset=utf-8', 'transfer-encoding': 'chunked'}) = <Response [200 OK]>.headers

tests/test_streaming_methods.py:393: AssertionError
_________________________ test_https_url_in_agent_card _________________________

sut_client = <tck.sut_client.SUTClient object at 0x7f13bf591c10>
agent_card_data = {'capabilities': {'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text'], 'description': 'A...plete A2A agent implementation designed specifically for testing with the A2A Technology Compatibility Kit (TCK)', ...}

    def test_https_url_in_agent_card(sut_client, agent_card_data):
        """
        A2A Protocol Specification: Transport Security and Agent Card
    
        Test that the URLs in the Agent Card use HTTPS.
    
        This validates that the agent's self-reported URLs in the Agent Card
        follow security best practices by using HTTPS.
        """
        if agent_card_data is None:
            pytest.skip("Agent Card data is not available")
    
        # Check URL field if present
        if "url" in agent_card_data:
            url = agent_card_data["url"]
>           assert url.startswith("https://"), f"Agent Card URL should use HTTPS: {url}"
E           AssertionError: Agent Card URL should use HTTPS: http://localhost:9999/
E           assert False
E            +  where False = <built-in method startswith of str object at 0x7f13bf3de270>('https://')
E            +    where <built-in method startswith of str object at 0x7f13bf3de270> = 'http://localhost:9999/'.startswith

tests/test_transport_security.py:115: AssertionError
=========================== short test summary info ============================
FAILED tests/test_edge_cases.py::test_empty_arrays - AssertionError: assert F...
FAILED tests/test_edge_cases.py::test_boundary_values - AssertionError: asser...
FAILED tests/test_invalid_business_logic.py::test_unsupported_part_kind - Ass...
FAILED tests/test_invalid_business_logic.py::test_empty_message_parts - Asser...
FAILED tests/test_protocol_violations.py::test_missing_method_field - Asserti...
FAILED tests/test_streaming_methods.py::test_tasks_resubscribe_nonexistent - ...
FAILED tests/test_transport_security.py::test_https_url_in_agent_card - Asser...
======== 7 failed, 54 passed, 14 skipped, 1 xpassed in 64.90s (0:01:04) ========
Running command: pytest --sut-url http://localhost:9999 --test-scope all
